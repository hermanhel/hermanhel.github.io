#+title: Clojure tutorial

* Walkthrough

** Tutorial
*** Official website
I first checked  [[https://clojure.org/guides/getting_started][offical clojure website]], in search of download, tutorials and doc. I followed the install instruction step by step and went through the tutorials.

Then I checked several websites mentioned in [[https://clojure.org/guides/learn/flow][the control flow part]] of the tutorial.
*** Setting up cider and failure
The next thing I wanted to do is to set myself up for CIDER in Emacs. And the I met the first obstacle: it won't work. Both jack-in-clj in Emacs and =lein= in termianl would end up java reporting compile issue, missing class file in class path and so on. I checked the error information in DuckDuckGo, several guys have same issue, but no real solutions. I tried some solutions, including reinstalling everything, editing =~/.lein/profile.clj=, =~/.lein/project.clj/=, filling =~/.m2/cider/= with source files from github repo =/src= folder, none worked. The issue went away after I restarted the computer.

So if you have similar issue, I would suggest restart your computer.
*** Cookbook
Next thing I did is visit github.com and search keyword "clojure", in search of tutorial/sample repo, popular library, and other thing other clojure programmers cared about(the high star repos), where I accidentally discovered clojurescript(this stuff compiles to js! cool!), and this amazing repo [[https://github.com/clojure-cookbook/clojure-cookbook][clojure-cookbook]]. It's like everything I want put together

** Environment
I first installed clojure, I forgot exactly how, I got it settled.

** Meta-learning.
After I have finished half of the /cookbook/ mentioned above, the progress seemed to stuck, and the /cookbook/ seems not that interesting as it first impressed me.

I then set out for recourses/methods for learning clojure. I have this =Metalearning= subtree in my =clojure= note in org-roam, with notes to various resources I found online.

What I did was pretty simple, just searching "how to learn clojure" in duckduckgo/quora, and collecting information from sensible passages within the first few pages of results.

Here is a simple conclusion:
+ Hands-on experiance matters very much.
  + Problem could be found in
    + [[https://www.hackerrank.com/][HackerRank]] (I signed up and did 2 quetions. It's like an Online Judge)
    + [[https://github.com/4clojure/4clojure][4clojure repo]] (An Online Judge. Quite neet one, testing lots of basic understanding of common tools.)
      (the original 4clojure stopped running for some reason. You may want to use  [[https://4clojure.oxal.org/][4clojure]])
      (the answer from others would be very helpful)
      (very like code golf)
    + 2 local problem set with compiler error as que for next problem to tackle.
      + [[http://clojurekoans.com/][clojure koan]]
      + [[https://github.com/gigasquid/wonderland-clojure-katas][Clojure Katas]]
      + [[http://www.parens-of-the-dead.com/][Parens of the Dead]] seems to be one, too. But I haven't checked that much
    + [[https://projecteuler.net][ProjectEuler]] is one wonderful place to find interesting quesiton to tackle and various solution in various languages. I kind of use it as the main source of problem. If anyone like, you can add me friend with my friend key =1922849_zCWlKk762mMOWAWnMpDwpsJ4qKwN1AJU=. We can compete who's doing the faster!
+ [[braveclojure.com][Clojure for the brave and true]] is mentioned and recommended in various places, commended as a very good starting place for people with no prior /serious programming/ experiance, and I agreed with them.
  It is now my main material, and it's written in a humorous yet very informational way. The unnecessary fantasy jargons have made the passages shorter, and more comprehensive, compared to most tutorials and books I've found.
  It's an useful useful funny funny book, and I recommand anyone to read it, even as jokes! I found it an appropriate materail for practice speed reading.
  Surpricingly, the 2nd chapter of this book is also the most friendly Emacs tutorial I have read!
+ Other books
  + somebody recommended /SICP/ (Structure and Interpretation of Computer Programs)
    It's an textbook by MIT or something, and there sure are courses covering this book on internet, and by MITOCW I think, taught by a professor with poor hair amount and an accent of pronouncing /about/ as /abiout/, who managed to present the his understandings of the contents marvelously. Anyone who can stand tons of /abiout/s should check it out.
  + /Clojure Programming/ and /Programming Clojure/ and /the joy of clojure/ are always mentioned in a row. Seems pretty much people own them as a combination.
+ Blogs/Online Tutorials
  + [[https://kimh.github.io/clojure-by-example/#about-this-page][clojure by example]] seems to have a good reputation. it is said to be easy to get on with.
  + [[clojuredoc.org][clojuredocs]] seems to be a popular choice of doc reference site
  + [[http://iloveponies.github.io/120-hour-epic-sax-marathon/index.html][functional programming in clojure]] was mentioned for times
  + [[https://stuartsierra.com/][Stuart Sierra's Blog]] have some insights too.
  + /Rich Hickey/ and /Stuart Halloway/'s talks are recommanded in various places and easy too find. I watched /Rich Hickey/'s /Are we there yet/, this man truely have very brilliant insights, and knows how to share them with others. I was striked with the word /timeless/.

** Clojure for the brave and true
I then set out reading /Clojure for the brave and true/. It's free on the website, [[braveclojure.com][braveclojure.com]]. The comprehensive and informational, concrete writing style allows fast and enjoyable reading experiance, and the questions are real valid questions.

